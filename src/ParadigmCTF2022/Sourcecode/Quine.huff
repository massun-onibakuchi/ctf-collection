// Quine: this.code == this.staticcall().returndata
// we can't get code with something like CODECOPY and STATICCALL because it is restricted.
// maybe all we can do is to hardcode the code in bytecode and output itself when called.
// structure of the code would be like this:
//  1. push a hardcoded code <code> to stack
//  2. copy the code <code> to memory and return code itself
// so, part 2 itself must be included in <code>. i.e. bytecode and output would be like this: <code><code>
// indeed, to push <code> to stack PUSHX is prepended. PUSHX<code><code>

// @note Pseudo code
// #define macro MAIN() = takes (0) returns (0) {
    // part 1

    // 0x806001525952606f60005360216000f3 // code

    // part 2

    // [0x01, <code>, <code>]
    // store range=[1,1+code_size] value=<code>
    // mem: 00code

    // [code_size+1, <code>]
    // store range=[codesize+1,codesize+1+code_size] value=<code>
    // mem: 00codecode

    // PUSHX_OP 0x00 mstore8 // [0x00, PUSHX]
    // mem: PUSHX<code><code>

    // return range[0, codesize+1+code_size]
// }

// NOTE: mstore writes "32-byte" word.
/*
#define macro MAIN() = takes (0) returns (0) {
    0x806001525952606f60005360216000f3

    // actually this results in: mstore offset=0x01 value=0x0000...000000<code>
    // mem: 0000...00<code> because mstore writes 32-byte word.
    dup1 0x01    // [0x01, <code>, <code>]
    mstore
    ...
}
*/
// workaround
// 1. padding bytecode: padding+code
// 2. mstore offset=0x20 instead of 0x00
// option 2 is maybe simpler.
#define macro MAIN() = takes (0) returns (0) {
    // part 1

    0x80602352601252607060205360236020f3 // code (17-byte)

    // part 2

    // Considering that the byte code is less than 32 bytes, memory from 0x00 to 0x19 is not used.
    dup1 0x23         // [0x23, code, code]
    mstore
    // mem: 0x20 000000code
    // =>      0x00000000000000000000000000000000000080602352601252607060205360236020f3

    0x12              // [0x12, code]
    mstore
    // mem: 0x20 00codecode
    // =>      0x0080602352601252607060205360236020f380602352601252607060205360236020f3

    0x70 0x20 mstore8 // [] (0x70 is PUSH17)
    // mem: 0x20 70codecode

    // size=0x23=17+17+1=35 in decimal
    0x23 0x20 return  // []
}
// > huffc src/ParadigmCTF2022/Sourcecode/Quine.huff --bytecode
// 60238060093d393df37080602352601252607060205360236020f380602352601252607060205360236020f3