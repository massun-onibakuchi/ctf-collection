// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./challenge/WhatAreBuckets.sol";

contract TestWhatAreBuckets is Test {
    address signer = 0x004870D27dFd8C851c596c4dD4BbB0DabccaAc0a;
    WhatAreBuckets whatAreBuckets;

    uint256 start;

    function setUp() public {
        whatAreBuckets = new WhatAreBuckets();
        start = whatAreBuckets.generate(signer);
        console.log("start :>>", start);
    }

    function testExploit() public {
        // prettier-ignore
        // generated by python script in src/Curta/WhatAreBuckets/what_are_buckets.py
        uint8[38] memory found_path = [1, 4, 1, 4, 1, 4, 2, 4, 1, 4, 1, 4, 2, 4, 1, 4, 1, 4, 2, 4, 1, 4, 1, 4, 2, 4, 1, 4, 1, 4, 2, 4, 1, 4, 1, 4, 2, 4];
        // reconstruct the command
        uint256 found_command = 0;
        for (uint256 i = 0; i < 38; i++) {
            found_command |= uint256(found_path[i]) << (i * 3);
        }
        // reconstruct the solution from the command
        uint256 solution = found_command ^ uint256(keccak256(abi.encodePacked(start)));
        assertTrue(whatAreBuckets.verify(start, solution));
    }
}
